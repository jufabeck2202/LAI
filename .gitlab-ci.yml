stages:
  - build
  - push
  - validate
  - prepare
  - deploy
  - clean

build:docker:
  stage: build
  tags:
  - kubernetes
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  before_script:
    - ''
  script:
    - >
      /kaniko/executor --no-push
      --context ${CI_PROJECT_DIR}/pwa
      --dockerfile ${CI_PROJECT_DIR}/pwa/Dockerfile
      --destination ${CI_REGISTRY_IMAGE}

push:docker:tags:
  only:
  - tags
  stage: push
  tags:
  - kubernetes
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  before_script:
    - ''
  script:
    - >
      echo "{\"auths\":{\"${CI_REGISTRY}\"
      :{\"username\":\"${CI_REGISTRY_USER}\",\"password\"
      :\"${CI_REGISTRY_PASSWORD}\"}}}" > /kaniko/.docker/config.json
    - >
      /kaniko/executor
      --cache=true
      --context ${CI_PROJECT_DIR}/pwa
      --dockerfile ${CI_PROJECT_DIR}/pwa/Dockerfile
      --destination ${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}

push:docker:latest:
  only:
  - master
  stage: push
  tags:
  - kubernetes
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  before_script:
    - ''
  script:
    - >
      echo "{\"auths\":{\"${CI_REGISTRY}\"
      :{\"username\":\"${CI_REGISTRY_USER}\",\"password\"
      :\"${CI_REGISTRY_PASSWORD}\"}}}" > /kaniko/.docker/config.json
    - >
      /kaniko/executor
      --cache=true
      --context ${CI_PROJECT_DIR}/pwa
      --dockerfile ${CI_PROJECT_DIR}/pwa/Dockerfile
      --destination ${CI_REGISTRY_IMAGE}

image:
  name: hashicorp/terraform:0.12.18
  entrypoint:
    - '/usr/bin/env'
    - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'

variables:
  PLAN: plan.tfplan

cache:
  paths:
    - terraform/.terraform

before_script:
  - export
  - cat /etc/*-release
  - cd ./terraform
  - echo "${BACKEND_VARS}" > backend.tfvars
  - echo "${TF_VARS}" > terraform.tfvars
  - terraform init --backend-config backend.tfvars
  - terraform --version
  - pwd

validate:
  stage: validate
  tags:
    - kubernetes
  script:
    - terraform validate
    - terraform fmt -diff=true -write=false

plan:
  stage: prepare
  tags:
    - kubernetes
  script:
    - terraform plan -out=${PLAN} -var-file="terraform.tfvars"
  artifacts:
    name: plan
    paths:
      - terraform/${PLAN}

# auto-apply:
#   stage: deploy
#   only:
#     refs:
#       - master
#   tags:
#     - kubernetes
#   script:
#     - terraform apply -input=false ${PLAN}
#   dependencies:
#     - plan

manual-apply:
  stage: deploy
  tags:
    - kubernetes
  script:
    - terraform apply -input=false ${PLAN}
  dependencies:
    - plan
  when: manual

destroy:
  stage: clean
  tags:
    - kubernetes
  script:
    - terraform destroy -auto-approve
  dependencies:
    - manual-apply
  when: manual

destroy-instance:
  stage: clean
  tags:
    - kubernetes
  script:
    - terraform destroy -target module.instance.openstack_compute_instance_v2.my-instance -auto-approve
  dependencies:
    - manual-apply
  when: manual
